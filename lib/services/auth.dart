import 'package:brewcrew/services/database.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:brewcrew/models/user.dart';
// creating a class for modular purpose

class AuthService {
  // _auth means this is private we can use it inside this class only
  final FirebaseAuth _auth = FirebaseAuth.instance;
  // here we have FirebaseAuth object _auth which is instance of FirebaseAuth class.

  // create user obj based on FirebaseUser
  User _userFromFirebaseUser(FirebaseUser user) {
    return user != null ? User(uid: user.uid) : null;
  }

// auth change user stream

  // here we changed returen type from FireBase User into User
  Stream<User> get user {
    return _auth.onAuthStateChanged
        // this authstataechanged is the state which will change when
        // we change our options that is when we login or login out
        // when we login it will return a FireBase User object and when a user
        // signs out it will return a null object

        // since we have created our custom user class so we will map our firebase user
        //into our custom user model;
        .map(_userFromFirebaseUser);
    // HERE WR R Converting our firebase user into our custom user
  }

// sign in anomously
  // this is sync task
  Future signInAnon() async {
    try {
      AuthResult result = await _auth.signInAnonymously();
      // this will return a result which will be of type AuthResult
      FirebaseUser user = result.user;
      // if the sign-in is successful then we will add that user to firebase

      return _userFromFirebaseUser(user);
    } catch (e) {
      // if there is error in login then we willl throw a error
      print(e.toString());
      return null;
    }
  }

// sign out

  Future signOut() async {
    try {
      return await _auth.signOut();
    } catch (e) {
      print(e.toString());
      return null;
    }
  }

// register with email and password

  Future registerWithEmailAndPassword(String email, String password) async {
    try {
      AuthResult result = await _auth.createUserWithEmailAndPassword(
          email: email, password: password);
      // hit bascially returns a curreently signIn user
      FirebaseUser user = result.user;
      // we intilase that user as FireBase user
      await DatabaseService(uid: user.uid)
          .updateUserData('0', 'new crew member', 100);
      // here we creating Document for new user with dummy values
      //and we r passing uid which will be autogenerated whenever new user created
      return _userFromFirebaseUser(user);
      // if the user is successfully created then we will return its Uid
    } catch (e) {
      print(e.toString());
      return null;
    }
  }

// sign in using email & password
  Future signInWithEmailAndPassword(String email, String password) async {
    try {
      AuthResult result = await _auth.signInWithEmailAndPassword(
          email: email, password: password);
      // hit bascially returns a curreently signIn user
      FirebaseUser user = result.user;
      // we intilase that user as FireBase user
      return _userFromFirebaseUser(user);
      // if the user is successfully created then we will return its Uid
    } catch (e) {
      print(e.toString());
      return null;
    }
  }
}
